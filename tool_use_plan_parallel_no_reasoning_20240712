{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'This endpoint is used for image searches', 'name': 'google_search_v3_image_search', 'parameters': {'properties': {'gl': {'description': 'The gl parameter value is a two-letter country code. The gl parameter boosts search results whose country of origin matches the parameter value.', 'enum': ['us', 'uk', 'jp', 'cn', 'es', 'fr', 'de', 'kr', 'dk', 'it'], 'type': 'string'}, 'lr': {'description': 'Restricts the search to documents written in a particular language', 'enum': ['zh', 'en', 'de', 'fr', 'ja', 'ko', 'de', 'da', 'dk', 'it', 'es'], 'type': 'string'}, 'query': {'description': 'Search query.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Guess the macro nutrients of a dish given its title.', 'name': 'recipe_food_nutrition_guess_nutrition_by_dish_name', 'parameters': {'properties': {'title': {'description': 'The title of the dish. Example: Spaghetti Aglio et Olio', 'type': 'string'}}, 'required': ['title'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI want to know the nutritional value of Hamburger, and provide an image of Hamburger. \n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "f9850c2c-79eb-4c21-a9c8-fc5a9b8c0bb6", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml.', 'name': 'realtime_weather', 'parameters': {'properties': {'q': {'description': 'Query parameter based on which data is sent back. It could be following: Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508 city name e.g.: q=Paris US zip e.g.: q=10001 UK postcode e.g: q=SW1 Canada postal code e.g: q=G2J metar: e.g: q=metar:EGLL iata:<3 digit airport code> e.g: q=iata:DXB auto:ip IP lookup e.g: q=auto:ip IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Query airport metadata by the IATA Code.', 'name': 'airport_metadata_by_iata_code', 'parameters': {'properties': {'code': {'description': 'e.g. JFK', 'type': 'string'}}, 'required': ['code'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI require the time zone for \"LAX\" airport and the current temperature for Los Angeles.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "94a50e6a-0d23-478c-a5a0-bfa4085b1caa", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml.', 'name': 'realtime_weather', 'parameters': {'properties': {'q': {'description': 'Query parameter based on which data is sent back. It could be following: Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508 city name e.g.: q=Paris US zip e.g.: q=10001 UK postcode e.g: q=SW1 Canada postal code e.g: q=G2J metar: e.g: q=metar:EGLL iata:<3 digit airport code> e.g: q=iata:DXB auto:ip IP lookup e.g: q=auto:ip IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Search local businesses on Google Maps.', 'name': 'local_business_data_search', 'parameters': {'properties': {'limit': {'description': 'Maximum number of businesses to return (1-500).', 'type': 'string'}, 'query': {'description': \"Search query / keyword such as 'Plumbers near New-York, USA', 'Bars in 94102, USA'\", 'type': 'string'}, 'subtypes': {'description': 'Find businesses with specific subtypes, specified as a comma separated list of types (business categories). For the complete list of types, see https://daltonluka.com/blog/google-my-business-categories. E.g. Night club,Dance club,Bar,Pub', 'type': 'string'}}, 'required': ['query', 'subtypes'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI would like to enjoy some time surrounded by natural beauty. Could you please provide me with the address of a park in Washington DC? Additionally, could you tell me the current weather conditions in Washington?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "f91e1c5e-fed7-4582-a105-9a52f6c56c6a", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Astronomy API allows a user to get up to date information for sunrise, sunset, moonrise, moonset, moon phase and illumination in json.', 'name': 'weatherapi_com_astronomy_api', 'parameters': {'properties': {'dt': {'description': 'date', 'type': 'string'}, 'q': {'description': 'Query parameter based on which data is sent back. It could be following:Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508 city name e.g.: q=Paris US zip e.g.: q=10001 UK postcode e.g: q=SW1Canada postal code e.g: q=G2J metar: e.g: q=metar:EGLL iata:<3 digit airport code> e.g: q=iata:DXB auto:ip IP lookup e.g: q=auto:ip IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'History weather API method returns historical weather for a date on or after 1st Jan, 2010 (depending upon subscription level) as json.', 'name': 'weatherapi_com_history_weather', 'parameters': {'properties': {'dt': {'description': \"For history API 'dt' should within the last 7 days in yyyy-MM-dd format\", 'type': 'string'}, 'q': {'description': 'Query parameter based on which data is sent back. It could be following:  Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508 city name e.g.: q=Paris US zip e.g.: q=10001 UK postcode e.g: q=SW1 Canada postal code e.g: q=G2J metar: e.g: q=metar:EGLL iata:<3 digit airport code> e.g: q=iata:DXB auto:ip IP lookup e.g: q=auto:ip IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1', 'type': 'string'}}, 'required': ['q', 'dt'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat's the moon illumination in Baltimore and what was the maximum temperature on the March 16th, 2024?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "7dd2e811-4cc6-44cf-94de-7868cae0bcd1", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Gives all keto recipes by its difficulty (Easy, Medium or Difficult).', 'name': 'keto_diet_filter_keto_recipes_by_difficulty', 'parameters': {'properties': {'difficulty': {'description': 'Level of difficulty', 'type': 'string'}}, 'required': ['difficulty'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Gives keto recipes within given range of Calories value. Calories_in_grams__lt = Less than & Calories_in_grams__gt = Greater than', 'name': 'keto_diet_filter_calories', 'parameters': {'properties': {'calories_in_grams__gt': {'description': 'More than', 'type': 'string'}, 'calories_in_grams__lt': {'description': 'Less than', 'type': 'string'}}, 'required': ['calories_in_grams__lt', 'calories_in_grams__gt'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nCould you find me a keto meal ranging from 300 to 500 calories, along with another keto option that's of medium difficulty to prepare?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "baa613a1-e991-497a-ac22-d6b3fb80268f", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Google Search API. Search the world\u2019s information, including webpages, related keywords and more.', 'name': 'google_search_v2', 'parameters': {'properties': {'query': {'description': 'Search query. You can use Google Search parameters.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Search local businesses on Google Maps.', 'name': 'local_business_data_search', 'parameters': {'properties': {'limit': {'description': 'Maximum number of businesses to return (1-500).', 'type': 'string'}, 'query': {'description': \"Search query / keyword such as 'Plumbers near New-York, USA', 'Bars in 94102, USA'\", 'type': 'string'}, 'subtypes': {'description': 'Find businesses with specific subtypes, specified as a comma separated list of types (business categories). For the complete list of types, see https://daltonluka.com/blog/google-my-business-categories. E.g. Night club,Dance club,Bar,Pub', 'type': 'string'}}, 'required': ['query', 'subtypes'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nFind me a bar in Washington, USA and advise me on the most suitable alcohol for digestion.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "436eacb4-6b0a-4ac7-ac7b-6b98456dc7db", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Find recipes that use as many of the given ingredients as possible and have as little as possible missing ingredients. This is a whats in your fridge API endpoint.', 'name': 'recipe_food_nutrition_search_recipes_by_ingredients', 'parameters': {'properties': {'ingredients': {'description': 'A comma-separated list of ingredients that the recipes should contain. Example: apples,flour,sugar', 'type': 'string'}, 'number': {'description': 'The maximal number of recipes to return (default = 5).', 'type': 'string'}, 'ranking': {'description': 'Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.', 'enum': ['1', '2'], 'type': 'string'}}, 'required': ['ingredients'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Guess the macro nutrients of a dish given its title.', 'name': 'recipe_food_nutrition_guess_nutrition_by_dish_name', 'parameters': {'properties': {'title': {'description': 'The title of the dish. Example: Spaghetti Aglio et Olio', 'type': 'string'}}, 'required': ['title'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI just made black bean burgers but I'm not sure how it's supposed to look. Can you give me a link to a picture of how it's supposed to look? I also want to know the protein content in the dish.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "4ee04773-e107-467b-aaaa-5c1904dcfa23", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Lists fixtures for a given date', 'name': 'cricket_live_data_fixtures_by_date', 'parameters': {'properties': {'date': {'description': 'date', 'type': 'string'}}, 'required': ['date'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Lists results for given date', 'name': 'cricket_live_data_results_by_date', 'parameters': {'properties': {'date': {'description': 'The date you want to check the results for. Please use format YYYY-MM-DD.', 'type': 'string'}}, 'required': ['date'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat cricket game was played on July 10, 2023? And what cricket game is going to be played on July 10, 2024?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "754508da-d062-4bd7-8a9b-f505684296a7", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Google Search API. Search the world\u2019s information, including webpages, related keywords and more.', 'name': 'google_search_v2', 'parameters': {'properties': {'query': {'description': 'Search query. You can use Google Search parameters.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'AI recommendation of the viability, stability, and profitability of a business', 'name': 'yahoo_finance_finance_analytics', 'parameters': {'properties': {'symb': {'description': \"The company's symbol; ex: tsla\", 'type': 'string'}}, 'required': ['symb'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI want to know more about the company of my favorite graphics card. Tell me the total revenue of Nvidia Corporation, and show me an article about their subsidiaries.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "08526548-a8bd-4834-9d01-e38258e0e31a", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Live currency and foreign exchange rates by specifying source and destination quotes and optionally amount to calculate. Support vast amount of quotes around the world.', 'name': 'currency_exchange', 'parameters': {'properties': {'from': {'description': 'Source currency', 'enum': ['ARS', 'BRL', 'CDF', 'CHF', 'CNY', 'EGP', 'EUR', 'INR', 'JPY', 'MXN', 'USD', 'IDR', 'GBP', 'QAR', 'SLL', 'NOK'], 'type': 'string'}, 'to': {'description': 'Target currency', 'enum': ['ARS', 'BRL', 'CDF', 'CHF', 'CNY', 'EGP', 'EUR', 'INR', 'JPY', 'MXN', 'CAD', 'NOK', 'SGD', 'USD', 'IDR', 'LKR', 'CAD', 'TZS', 'ZAR', 'OMR'], 'type': 'string'}}, 'required': ['from', 'to'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Simple and accurate currency converter allows you to convert between 160+ currencies', 'name': 'currency_converter', 'parameters': {'properties': {'amount': {'description': 'Amount to convert. Must be a positive number', 'type': 'number'}, 'from': {'description': 'Origin currency code', 'type': 'string'}, 'to': {'description': 'Target currency code', 'type': 'string'}}, 'required': ['from', 'to', 'amount'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nHow much is a Chinese yuan worth in Euros? And what is the equivalent of 50 Euros in pounds?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "1dbb902f-8009-4cc1-8715-2678ac448f39", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Astronomy API allows a user to get up to date information for sunrise, sunset, moonrise, moonset, moon phase and illumination in json.', 'name': 'weatherapi_com_astronomy_api', 'parameters': {'properties': {'dt': {'description': 'date', 'type': 'string'}, 'q': {'description': 'Query parameter based on which data is sent back. It could be following:Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508 city name e.g.: q=Paris US zip e.g.: q=10001 UK postcode e.g: q=SW1Canada postal code e.g: q=G2J metar: e.g: q=metar:EGLL iata:<3 digit airport code> e.g: q=iata:DXB auto:ip IP lookup e.g: q=auto:ip IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Time Zone API method allows a user to get up to date time zone and local time information in json.', 'name': 'weatherapi_com_time_zone_api', 'parameters': {'properties': {'q': {'description': 'Query parameter based on which data is sent back. It could be following:  Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508 city name e.g.: q=Paris US zip e.g.: q=10001 UK postcode e.g: q=SW1 Canada postal code e.g: q=G2J metar: e.g: q=metar:EGLL iata:<3 digit airport code> e.g: q=iata:DXB auto:ip IP lookup e.g: q=auto:ip IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat time zone is Greenland in and what moon phase is it currently in?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "51a6d1c9-cff6-4fb5-96bb-57b4ef1e2bbb", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Search & Product Details Api', 'name': 'tokopediaapi', 'parameters': {'properties': {'act': {'description': 'Action to perform.', 'enum': ['search'], 'type': 'string'}, 'query': {'description': 'Term to perform the action with.', 'type': 'string'}}, 'required': ['act', 'query'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Get all the YouTube Search Results Items and their Information! No limits and no Google API Key needed!', 'name': 'youtube_search_results', 'parameters': {'properties': {'q': {'description': 'The URL Encoded search Query, e.g: justin+bieber', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat is the cost of the Samsung Note 10, and could you please provide an unboxing video for the Samsung Note 10 as well?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "0c6dcf90-cd99-4130-8f43-0bd79d5ae5cc", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Find recipes that use as many of the given ingredients as possible and have as little as possible missing ingredients. This is a whats in your fridge API endpoint.', 'name': 'recipe_food_nutrition_search_recipes_by_ingredients', 'parameters': {'properties': {'ingredients': {'description': 'A comma-separated list of ingredients that the recipes should contain. Example: apples,flour,sugar', 'type': 'string'}, 'number': {'description': 'The maximal number of recipes to return (default = 5).', 'type': 'string'}, 'ranking': {'description': 'Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.', 'enum': ['1', '2'], 'type': 'string'}}, 'required': ['ingredients'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Guess the macro nutrients of a dish given its title.', 'name': 'recipe_food_nutrition_guess_nutrition_by_dish_name', 'parameters': {'properties': {'title': {'description': 'The title of the dish. Example: Spaghetti Aglio et Olio', 'type': 'string'}}, 'required': ['title'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat is the protein content of Gumbo, and what meal can be prepared using apples?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "8647e4fe-2975-48db-b951-1c5af4324544", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Search & Product Details Api', 'name': 'tokopediaapi', 'parameters': {'properties': {'act': {'description': 'Action to perform.', 'enum': ['search'], 'type': 'string'}, 'query': {'description': 'Term to perform the action with.', 'type': 'string'}}, 'required': ['act', 'query'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Get all the YouTube Search Results Items and their Information! No limits and no Google API Key needed!', 'name': 'youtube_search_results', 'parameters': {'properties': {'q': {'description': 'The URL Encoded search Query, e.g: justin+bieber', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat is the price of a New Balance shoe, and could you provide me with a review video of New Balance products?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "7eaae065-dcc0-4756-b728-02ccd6446e65", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Simple and accurate currency converter allows you to convert between 160+ currencies', 'name': 'currency_converter', 'parameters': {'properties': {'amount': {'description': 'Amount to convert. Must be a positive number', 'type': 'number'}, 'from': {'description': 'Origin currency code', 'type': 'string'}, 'to': {'description': 'Target currency code', 'type': 'string'}}, 'required': ['from', 'to', 'amount'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Google Search API. Search the world\u2019s information, including webpages, related keywords and more.', 'name': 'google_search_v2', 'parameters': {'properties': {'query': {'description': 'Search query. You can use Google Search parameters.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat currency is used in Mexico? Can you assist me in converting $25 to Chinese Yuan (USD/CNY)?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "2933c841-3695-4465-87c6-8082856c13b7", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Get all the YouTube Search Results Items and their Information! No limits and no Google API Key needed!', 'name': 'youtube_search_results', 'parameters': {'properties': {'q': {'description': 'The URL Encoded search Query, e.g: justin+bieber', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Gives all recipes by the search term.', 'name': 'keto_diet_search_keto_recipe', 'parameters': {'properties': {'search': {'description': 'Insert term', 'type': 'string'}}, 'required': ['search'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat are the ingredients needed to make Hearty Crab Soup? I also want a link to a YouTube video tutorial.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "7076f1bd-ea8c-4133-bc57-bd382f4e4e21", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Find places, filtering by optional criteria.', 'name': 'geodb_cities_places', 'parameters': {'properties': {'countryIds': {'description': 'Only places in these countries (comma-delimited country codes from GeoDB Cities - Countries or WikiData ids)', 'type': 'string'}, 'location': {'description': 'Only places near this location. Latitude/longitude in ISO-6709 format: \u00b1DD.DDDD\u00b1DDD.DDDD', 'type': 'string'}, 'namePrefix': {'description': 'The beginning of the place you want to look up', 'type': 'string'}, 'radius': {'description': 'The location radius within which to find places. Only use if a location is given', 'type': 'string'}}, 'required': ['namePrefix'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml.', 'name': 'realtime_weather', 'parameters': {'properties': {'q': {'description': 'Query parameter based on which data is sent back. It could be following: Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508 city name e.g.: q=Paris US zip e.g.: q=10001 UK postcode e.g: q=SW1 Canada postal code e.g: q=G2J metar: e.g: q=metar:EGLL iata:<3 digit airport code> e.g: q=iata:DXB auto:ip IP lookup e.g: q=auto:ip IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhere is The Grand Canyon located, and what is the current temperature there?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "64ee4f5c-914b-4e4a-9ee6-eeeeb1ad84b3", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Find recipes that use as many of the given ingredients as possible and have as little as possible missing ingredients. This is a whats in your fridge API endpoint.', 'name': 'recipe_food_nutrition_search_recipes_by_ingredients', 'parameters': {'properties': {'ingredients': {'description': 'A comma-separated list of ingredients that the recipes should contain. Example: apples,flour,sugar', 'type': 'string'}, 'number': {'description': 'The maximal number of recipes to return (default = 5).', 'type': 'string'}, 'ranking': {'description': 'Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.', 'enum': ['1', '2'], 'type': 'string'}}, 'required': ['ingredients'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Guess the macro nutrients of a dish given its title.', 'name': 'recipe_food_nutrition_guess_nutrition_by_dish_name', 'parameters': {'properties': {'title': {'description': 'The title of the dish. Example: Spaghetti Aglio et Olio', 'type': 'string'}}, 'required': ['title'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nCan you suggest a recipe I can make with peanuts, as well as provide information about the fat content of peanuts?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "063751ef-0e20-4b29-a2c5-e457a27127e6", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Get website traffic, key metrics, including engagement rate, traffic ranking, keyword ranking and traffic source.', 'name': 'similar_web', 'parameters': {'properties': {'domain': {'description': 'The site you want to obtain information for, example: amazon.com', 'type': 'string'}}, 'required': ['domain'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Checks the domain Whois Details', 'name': 'domain_checker', 'parameters': {'properties': {'domain': {'description': 'The domain to look up; ex: rapidapi.com', 'type': 'string'}}, 'required': ['domain'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI am conducting research for the Mercury Coffee and its website. Could you please provide me with the details of mercurys.com?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "4917fc16-56b0-4edf-9261-932c709dd564", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Get all phone specifications by brand name and model name', 'name': 'mobile_phone_specs_database_get_specifications_by_brand_name_and_model_name', 'parameters': {'properties': {'brandName': {'description': 'The brand you want to look up', 'type': 'string'}, 'modelName': {'description': 'The model you want to look up', 'type': 'string'}}, 'required': ['brandName', 'modelName'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Search & Product Details Api', 'name': 'tokopediaapi', 'parameters': {'properties': {'act': {'description': 'Action to perform.', 'enum': ['search'], 'type': 'string'}, 'query': {'description': 'Term to perform the action with.', 'type': 'string'}}, 'required': ['act', 'query'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI'm interested in getting the Sony Xperia 10 v, can you give me the price on Tokopedia and the body dimensions of the phone?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "48ebaff5-cd9e-4409-8192-dc61410865db", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'This endpoint is used for image searches', 'name': 'google_search_v3_image_search', 'parameters': {'properties': {'gl': {'description': 'The gl parameter value is a two-letter country code. The gl parameter boosts search results whose country of origin matches the parameter value.', 'enum': ['us', 'uk', 'jp', 'cn', 'es', 'fr', 'de', 'kr', 'dk', 'it'], 'type': 'string'}, 'lr': {'description': 'Restricts the search to documents written in a particular language', 'enum': ['zh', 'en', 'de', 'fr', 'ja', 'ko', 'de', 'da', 'dk', 'it', 'es'], 'type': 'string'}, 'query': {'description': 'Search query.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Get all phone specifications by brand name and model name', 'name': 'mobile_phone_specs_database_get_specifications_by_brand_name_and_model_name', 'parameters': {'properties': {'brandName': {'description': 'The brand you want to look up', 'type': 'string'}, 'modelName': {'description': 'The model you want to look up', 'type': 'string'}}, 'required': ['brandName', 'modelName'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI desire a phone with a dual SIM function. Is Infinix Hot 40i a good option? Please, also check for a link to the image.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "a2a781e2-256d-4fee-8e97-7752c110120f", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Find recipes that use as many of the given ingredients as possible and have as little as possible missing ingredients. This is a whats in your fridge API endpoint.', 'name': 'recipe_food_nutrition_search_recipes_by_ingredients', 'parameters': {'properties': {'ingredients': {'description': 'A comma-separated list of ingredients that the recipes should contain. Example: apples,flour,sugar', 'type': 'string'}, 'number': {'description': 'The maximal number of recipes to return (default = 5).', 'type': 'string'}, 'ranking': {'description': 'Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.', 'enum': ['1', '2'], 'type': 'string'}}, 'required': ['ingredients'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Guess the macro nutrients of a dish given its title.', 'name': 'recipe_food_nutrition_guess_nutrition_by_dish_name', 'parameters': {'properties': {'title': {'description': 'The title of the dish. Example: Spaghetti Aglio et Olio', 'type': 'string'}}, 'required': ['title'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nCan you tell me how many carbs in an apple, and a good recipe I can make using them?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "e46eda14-e6c3-4f06-b336-f4538ddaecac", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml.', 'name': 'realtime_weather', 'parameters': {'properties': {'q': {'description': 'Query parameter based on which data is sent back. It could be following: Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508 city name e.g.: q=Paris US zip e.g.: q=10001 UK postcode e.g: q=SW1 Canada postal code e.g: q=G2J metar: e.g: q=metar:EGLL iata:<3 digit airport code> e.g: q=iata:DXB auto:ip IP lookup e.g: q=auto:ip IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Search local businesses on Google Maps.', 'name': 'local_business_data_search', 'parameters': {'properties': {'limit': {'description': 'Maximum number of businesses to return (1-500).', 'type': 'string'}, 'query': {'description': \"Search query / keyword such as 'Plumbers near New-York, USA', 'Bars in 94102, USA'\", 'type': 'string'}, 'subtypes': {'description': 'Find businesses with specific subtypes, specified as a comma separated list of types (business categories). For the complete list of types, see https://daltonluka.com/blog/google-my-business-categories. E.g. Night club,Dance club,Bar,Pub', 'type': 'string'}}, 'required': ['query', 'subtypes'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nIs there an Airport in Seattle I can go to? I also want to know the current wind speed in Seattle.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "bd7dd85d-f55a-40e2-999e-a41ffff2fae4", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Gives keto recipes within given range of Calories value. Calories_in_grams__lt = Less than & Calories_in_grams__gt = Greater than', 'name': 'keto_diet_filter_calories', 'parameters': {'properties': {'calories_in_grams__gt': {'description': 'More than', 'type': 'string'}, 'calories_in_grams__lt': {'description': 'Less than', 'type': 'string'}}, 'required': ['calories_in_grams__lt', 'calories_in_grams__gt'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Gives keto recipes within given range of carbohydrates  value. carbohydrates_in_grams__lt = Less than & carbohydrates_in_grams__gt = Greater than', 'name': 'keto_diet_filter_carbohydrates', 'parameters': {'properties': {'carbohydrates_in_grams__gt': {'description': 'More than', 'type': 'string'}, 'carbohydrates_in_grams__lt': {'description': 'Less than', 'type': 'string'}}, 'required': ['carbohydrates_in_grams__lt', 'carbohydrates_in_grams__gt'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nMy wife wants a keto meal with no more than 500 calories but more than 200 calories, and I want a meal that contains less than 25g but more than 10g of carbohydrates. Can you help us out with two dishes we can make? One for my wife and one for me.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "e618cb03-1606-4661-93eb-c3c75885cdbe", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Lists results for given date', 'name': 'cricket_live_data_results_by_date', 'parameters': {'properties': {'date': {'description': 'The date you want to check the results for. Please use format YYYY-MM-DD.', 'type': 'string'}}, 'required': ['date'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Get all the YouTube Search Results Items and their Information! No limits and no Google API Key needed!', 'name': 'youtube_search_results', 'parameters': {'properties': {'q': {'description': 'The URL Encoded search Query, e.g: justin+bieber', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWould you tell me which team won India vs Australia cricket World Cup final on 19th November 2023 and provide a YouTube link to watch the highlights?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "a135f0df-449e-4239-9f45-6f20e30d1806", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Search local businesses on Google Maps.', 'name': 'local_business_data_search', 'parameters': {'properties': {'limit': {'description': 'Maximum number of businesses to return (1-500).', 'type': 'string'}, 'query': {'description': \"Search query / keyword such as 'Plumbers near New-York, USA', 'Bars in 94102, USA'\", 'type': 'string'}, 'subtypes': {'description': 'Find businesses with specific subtypes, specified as a comma separated list of types (business categories). For the complete list of types, see https://daltonluka.com/blog/google-my-business-categories. E.g. Night club,Dance club,Bar,Pub', 'type': 'string'}}, 'required': ['query', 'subtypes'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Weather', 'name': 'weather_api', 'parameters': {'properties': {'city': {'description': 'Insert city name', 'type': 'string'}}, 'required': ['city'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nMy friend recommended Blue Water Cafe in Minnesota for me. Can you give me the contact number of the cafe and the current weather in Minnesota?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "02479b70-07a1-462d-b0f8-234b15b27652", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Search cocktails by name', 'name': 'the_cocktail_db_search_cocktail_by_name', 'parameters': {'properties': {'s': {'description': 'Search Cocktail Ingredient by Name', 'type': 'string'}}, 'required': ['s'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Filter by main ingredient', 'name': 'themealdb_filter_by_main_ingredient', 'parameters': {'properties': {'i': {'description': 'Insert ingredient', 'type': 'string'}}, 'required': ['i'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat meal can I make with tomato and what cocktail can I make with tomato?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "1c1befdc-fd3c-4234-b855-05782876c6fc", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'This endpoint is used for image searches', 'name': 'google_search_v3_image_search', 'parameters': {'properties': {'gl': {'description': 'The gl parameter value is a two-letter country code. The gl parameter boosts search results whose country of origin matches the parameter value.', 'enum': ['us', 'uk', 'jp', 'cn', 'es', 'fr', 'de', 'kr', 'dk', 'it'], 'type': 'string'}, 'lr': {'description': 'Restricts the search to documents written in a particular language', 'enum': ['zh', 'en', 'de', 'fr', 'ja', 'ko', 'de', 'da', 'dk', 'it', 'es'], 'type': 'string'}, 'query': {'description': 'Search query.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Google Search API. Search the world\u2019s information, including webpages, related keywords and more.', 'name': 'google_search_v2', 'parameters': {'properties': {'query': {'description': 'Search query. You can use Google Search parameters.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI want to see what Bosnia and Herzegovina looks like, can you show me a link to an image about Bosnia and Herzegovina and tell me about the country's history?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "0347d532-52d3-4c55-99f6-4b4c030634ed", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'This endpoint is used for image searches', 'name': 'google_search_v3_image_search', 'parameters': {'properties': {'gl': {'description': 'The gl parameter value is a two-letter country code. The gl parameter boosts search results whose country of origin matches the parameter value.', 'enum': ['us', 'uk', 'jp', 'cn', 'es', 'fr', 'de', 'kr', 'dk', 'it'], 'type': 'string'}, 'lr': {'description': 'Restricts the search to documents written in a particular language', 'enum': ['zh', 'en', 'de', 'fr', 'ja', 'ko', 'de', 'da', 'dk', 'it', 'es'], 'type': 'string'}, 'query': {'description': 'Search query.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Search cocktails by name', 'name': 'the_cocktail_db_search_cocktail_by_name', 'parameters': {'properties': {'s': {'description': 'Search Cocktail Ingredient by Name', 'type': 'string'}}, 'required': ['s'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nShow me a link to a picture of a Long vodka cocktail drink and teach me how to make it.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "c6bf9b3c-5055-4a67-a741-69dce409ad54", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Lists fixtures for a given date', 'name': 'cricket_live_data_fixtures_by_date', 'parameters': {'properties': {'date': {'description': 'date', 'type': 'string'}}, 'required': ['date'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Lists results for given date', 'name': 'cricket_live_data_results_by_date', 'parameters': {'properties': {'date': {'description': 'The date you want to check the results for. Please use format YYYY-MM-DD.', 'type': 'string'}}, 'required': ['date'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI missed the Cricket game on 15th March, 2024 can you tell me the teams that played? I also want to know the teams playing on 26th March, 2024 so I can decide if it's a game I'd love to watch.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "5da3af0e-0e84-4655-8402-1b5ebf6af38f", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Gives all recipes by the search term.', 'name': 'keto_diet_search_keto_recipe', 'parameters': {'properties': {'search': {'description': 'Insert term', 'type': 'string'}}, 'required': ['search'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Search cocktails by name', 'name': 'the_cocktail_db_search_cocktail_by_name', 'parameters': {'properties': {'s': {'description': 'Search Cocktail Ingredient by Name', 'type': 'string'}}, 'required': ['s'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nHowdy! My homeboy is coming over tomorrow! Please teach me how to make Cottage Cheese Hotcakes and provide the ingredients needed for New York Lemonade!\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "b8d20669-4add-4500-8c25-556e6511be4e", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Live currency and foreign exchange rates by specifying source and destination quotes and optionally amount to calculate. Support vast amount of quotes around the world.', 'name': 'currency_exchange', 'parameters': {'properties': {'from': {'description': 'Source currency', 'enum': ['ARS', 'BRL', 'CDF', 'CHF', 'CNY', 'EGP', 'EUR', 'INR', 'JPY', 'MXN', 'USD', 'IDR', 'GBP', 'QAR', 'SLL', 'NOK'], 'type': 'string'}, 'to': {'description': 'Target currency', 'enum': ['ARS', 'BRL', 'CDF', 'CHF', 'CNY', 'EGP', 'EUR', 'INR', 'JPY', 'MXN', 'CAD', 'NOK', 'SGD', 'USD', 'IDR', 'LKR', 'CAD', 'TZS', 'ZAR', 'OMR'], 'type': 'string'}}, 'required': ['from', 'to'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Search local businesses on Google Maps.', 'name': 'local_business_data_search', 'parameters': {'properties': {'limit': {'description': 'Maximum number of businesses to return (1-500).', 'type': 'string'}, 'query': {'description': \"Search query / keyword such as 'Plumbers near New-York, USA', 'Bars in 94102, USA'\", 'type': 'string'}, 'subtypes': {'description': 'Find businesses with specific subtypes, specified as a comma separated list of types (business categories). For the complete list of types, see https://daltonluka.com/blog/google-my-business-categories. E.g. Night club,Dance club,Bar,Pub', 'type': 'string'}}, 'required': ['query', 'subtypes'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat is the current exchange rate for \u20ac1 to Japanese Yen (EUR/JPY)? Additionally, I require the name of a shopping mall in Tokyo, Japan.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "0e088465-35b1-4439-a6be-d5553d4bac94", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Google Search API. Search the world\u2019s information, including webpages, related keywords and more.', 'name': 'google_search_v2', 'parameters': {'properties': {'query': {'description': 'Search query. You can use Google Search parameters.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Get all phone specifications by brand name and model name', 'name': 'mobile_phone_specs_database_get_specifications_by_brand_name_and_model_name', 'parameters': {'properties': {'brandName': {'description': 'The brand you want to look up', 'type': 'string'}, 'modelName': {'description': 'The model you want to look up', 'type': 'string'}}, 'required': ['brandName', 'modelName'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nCan you provide the specifications of Xiaomi Redmi 12, and how much is Xiaomi Redmi 12 in Paris?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "affc328d-b7f5-4797-a53f-953e806cb251", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Search & Product Details Api', 'name': 'tokopediaapi', 'parameters': {'properties': {'act': {'description': 'Action to perform.', 'enum': ['search'], 'type': 'string'}, 'query': {'description': 'Term to perform the action with.', 'type': 'string'}}, 'required': ['act', 'query'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Get all the YouTube Search Results Items and their Information! No limits and no Google API Key needed!', 'name': 'youtube_search_results', 'parameters': {'properties': {'q': {'description': 'The URL Encoded search Query, e.g: justin+bieber', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI need two things from you. The price of Xiaomi Redmi Note 12 on Tokopedia and a YouTube video reviewing the phone in english.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "dd5fbdeb-a1a9-4bfa-a810-3f1a8b424d5f", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Get all the YouTube Search Results Items and their Information! No limits and no Google API Key needed!', 'name': 'youtube_search_results', 'parameters': {'properties': {'q': {'description': 'The URL Encoded search Query, e.g: justin+bieber', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Search & Product Details Api', 'name': 'tokopediaapi', 'parameters': {'properties': {'act': {'description': 'Action to perform.', 'enum': ['search'], 'type': 'string'}, 'query': {'description': 'Term to perform the action with.', 'type': 'string'}}, 'required': ['act', 'query'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI'm installing a heater. Firstly, could you search for the price of a heater and find a link to a video demonstrating how to install a heater?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "5d5248ad-b945-432e-8d9e-e031dbafdc3a", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Search for entries with filters in query', 'name': 'lexicala_searchentries', 'parameters': {'properties': {'text': {'description': 'The headword text to search for', 'type': 'string'}}, 'required': ['text'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Google Search API. Search the world\u2019s information, including webpages, related keywords and more.', 'name': 'google_search_v2', 'parameters': {'properties': {'query': {'description': 'Search query. You can use Google Search parameters.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI need to know what kind of word queue is and a sentence where the word is used.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "f0ddd6ef-a5c1-41b1-8fab-fca1a2cc0090", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Information about the country: area_size, country, continent, timezone, currency, population, flag, dependent territories, wikipedia reference totals of the cities and the first-level divisions.', 'name': 'world_geo_data_country_details', 'parameters': {'properties': {'code': {'description': 'e.g. US', 'type': 'string'}, 'format': {'description': '', 'enum': ['json', 'xml'], 'type': 'string'}}, 'required': ['code'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': \"Returns the Place where a given IP Address is located. Returns 'Not Found' error when no place is related to the IP. When sending '127.0.0.1' or '0.0.0.0' IP Addresses it will return the Place from the request was performed.\", 'name': 'spott_get_place_by_ip', 'parameters': {'properties': {'id': {'description': 'IP Address (v4 and v6 are supported).', 'type': 'string'}, 'language': {'description': 'Specifies a language (ISO 639-1) to get the localized name of the place. If translation is not available, localizedName property will be null.', 'enum': ['ar', 'bg', 'de', 'en', 'pl', 'pt', 'ru', 'es', 'fr', 'it'], 'type': 'string'}}, 'required': ['id'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhich country is associated with the IP Address 1.1.1.255? Furthermore, what is the name of the country that uses the code \"DE\"?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "bc09de01-00fa-4925-8d6e-022cc80d56e5", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Time Zone API method allows a user to get up to date time zone and local time information in json.', 'name': 'weatherapi_com_time_zone_api', 'parameters': {'properties': {'q': {'description': 'Query parameter based on which data is sent back. It could be following:  Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508 city name e.g.: q=Paris US zip e.g.: q=10001 UK postcode e.g: q=SW1 Canada postal code e.g: q=G2J metar: e.g: q=metar:EGLL iata:<3 digit airport code> e.g: q=iata:DXB auto:ip IP lookup e.g: q=auto:ip IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Search local businesses on Google Maps.', 'name': 'local_business_data_search', 'parameters': {'properties': {'limit': {'description': 'Maximum number of businesses to return (1-500).', 'type': 'string'}, 'query': {'description': \"Search query / keyword such as 'Plumbers near New-York, USA', 'Bars in 94102, USA'\", 'type': 'string'}, 'subtypes': {'description': 'Find businesses with specific subtypes, specified as a comma separated list of types (business categories). For the complete list of types, see https://daltonluka.com/blog/google-my-business-categories. E.g. Night club,Dance club,Bar,Pub', 'type': 'string'}}, 'required': ['query', 'subtypes'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat's the time zone Hampton is in? I'm visiting there next week. I also want you to give me the name and address of a bar in Hampton for my visit.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "2b549188-da75-4b12-8675-ff1e19e1e09b", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Get all the YouTube Search Results Items and their Information! No limits and no Google API Key needed!', 'name': 'youtube_search_results', 'parameters': {'properties': {'q': {'description': 'The URL Encoded search Query, e.g: justin+bieber', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Google Search API. Search the world\u2019s information, including webpages, related keywords and more.', 'name': 'google_search_v2', 'parameters': {'properties': {'query': {'description': 'Search query. You can use Google Search parameters.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI want to watch Mr. Beast's videos on YouTube, please give me his channel link. How old is Mr. Beast, I heard he's not really old.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "c81f63f6-fac0-439a-9431-3d26133e26ee", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Lists results for given date', 'name': 'cricket_live_data_results_by_date', 'parameters': {'properties': {'date': {'description': 'The date you want to check the results for. Please use format YYYY-MM-DD.', 'type': 'string'}}, 'required': ['date'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Lists fixtures for a given date', 'name': 'cricket_live_data_fixtures_by_date', 'parameters': {'properties': {'date': {'description': 'date', 'type': 'string'}}, 'required': ['date'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat is the result of the Cricket game played on 2024-03-05?  And I love to know the venue of the game to be played on 2024-04-05.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "4a0bde42-5d9a-451d-9032-7eb3a49d8fae", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'This API call returns real-time exchange rate and converted amount for currency pair. Works with forex and cryptocurrency.', 'name': 'twelve_data_currency_conversion', 'parameters': {'properties': {'amount': {'description': 'Amount of the currency you want to exchange, e.g: USD/JPY, amount 122 (USD), you get amount 18294.51022 (JPY)', 'type': 'string'}, 'format': {'description': 'Csv or json', 'enum': ['csv', 'json'], 'type': 'string'}, 'symbol': {'description': 'Instrument symbol, E.g. USD/JPY, EUR/USD', 'type': 'string'}}, 'required': ['symbol', 'amount'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Google Search API. Search the world\u2019s information, including webpages, related keywords and more.', 'name': 'google_search_v2', 'parameters': {'properties': {'query': {'description': 'Search query. You can use Google Search parameters.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat is the present exchange rate between British pounds and Japanese yen? Additionally, what would be the equivalent value of 200 British pounds in Japanese Yen? Lastly, I'm interested in learning about the currency's historical performance.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "d6290ac2-3732-41c0-8182-a55ad3f52355", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Get all phone specifications by brand name and model name', 'name': 'mobile_phone_specs_database_get_specifications_by_brand_name_and_model_name', 'parameters': {'properties': {'brandName': {'description': 'The brand you want to look up', 'type': 'string'}, 'modelName': {'description': 'The model you want to look up', 'type': 'string'}}, 'required': ['brandName', 'modelName'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Get all the YouTube Search Results Items and their Information! No limits and no Google API Key needed!', 'name': 'youtube_search_results', 'parameters': {'properties': {'q': {'description': 'The URL Encoded search Query, e.g: justin+bieber', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nA friend is offering to give me the Apple iPhone 12 mini. Can you give me some information about the network speed capability of the phone and show me a video about the phone on YouTube?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "bfd9a54e-23e7-4d21-b2e4-fb8109346f84", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Search local businesses on Google Maps.', 'name': 'local_business_data_search', 'parameters': {'properties': {'limit': {'description': 'Maximum number of businesses to return (1-500).', 'type': 'string'}, 'query': {'description': \"Search query / keyword such as 'Plumbers near New-York, USA', 'Bars in 94102, USA'\", 'type': 'string'}, 'subtypes': {'description': 'Find businesses with specific subtypes, specified as a comma separated list of types (business categories). For the complete list of types, see https://daltonluka.com/blog/google-my-business-categories. E.g. Night club,Dance club,Bar,Pub', 'type': 'string'}}, 'required': ['query', 'subtypes'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Simple and accurate currency converter allows you to convert between 160+ currencies', 'name': 'currency_converter', 'parameters': {'properties': {'amount': {'description': 'Amount to convert. Must be a positive number', 'type': 'number'}, 'from': {'description': 'Origin currency code', 'type': 'string'}, 'to': {'description': 'Target currency code', 'type': 'string'}}, 'required': ['from', 'to', 'amount'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI'm embarking on a pilgrimage to Israel. What is the equivalent of $10000 in Israeli Sheqel and could you provide the address of a hotel in Israel?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "a9ccb6b3-418b-4aa1-bc88-f2e319c2ad42", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Lists results for given date', 'name': 'cricket_live_data_results_by_date', 'parameters': {'properties': {'date': {'description': 'The date you want to check the results for. Please use format YYYY-MM-DD.', 'type': 'string'}}, 'required': ['date'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Get all the YouTube Search Results Items and their Information! No limits and no Google API Key needed!', 'name': 'youtube_search_results', 'parameters': {'properties': {'q': {'description': 'The URL Encoded search Query, e.g: justin+bieber', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat's the title of the game played on 2024-02-03? Can you show me the match highlights of Cricket World Cup 2023 Final?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "151e9135-402f-43f7-9489-72568b2108b5", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Get all phone specifications by brand name and model name', 'name': 'mobile_phone_specs_database_get_specifications_by_brand_name_and_model_name', 'parameters': {'properties': {'brandName': {'description': 'The brand you want to look up', 'type': 'string'}, 'modelName': {'description': 'The model you want to look up', 'type': 'string'}}, 'required': ['brandName', 'modelName'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Google Search API. Search the world\u2019s information, including webpages, related keywords and more.', 'name': 'google_search_v2', 'parameters': {'properties': {'query': {'description': 'Search query. You can use Google Search parameters.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nMy dad want to buy me a new phone; I want to know the specifications of Vivo V29, and how much do they sell Vivo V29?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "0271aa0b-c0d8-4bed-a4df-fd8060b73ab2", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Lists results for given date', 'name': 'cricket_live_data_results_by_date', 'parameters': {'properties': {'date': {'description': 'The date you want to check the results for. Please use format YYYY-MM-DD.', 'type': 'string'}}, 'required': ['date'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Lists fixtures for a given date', 'name': 'cricket_live_data_fixtures_by_date', 'parameters': {'properties': {'date': {'description': 'date', 'type': 'string'}}, 'required': ['date'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat is the outcome of the Cricket games that were played on 2024-01-18, and which game will be played on 2024-04-03?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "ce5b6840-eaa1-4e60-bd4a-715328a4bf6f", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Astronomy API allows a user to get up to date information for sunrise, sunset, moonrise, moonset, moon phase and illumination in json.', 'name': 'weatherapi_com_astronomy_api', 'parameters': {'properties': {'dt': {'description': 'date', 'type': 'string'}, 'q': {'description': 'Query parameter based on which data is sent back. It could be following:Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508 city name e.g.: q=Paris US zip e.g.: q=10001 UK postcode e.g: q=SW1Canada postal code e.g: q=G2J metar: e.g: q=metar:EGLL iata:<3 digit airport code> e.g: q=iata:DXB auto:ip IP lookup e.g: q=auto:ip IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Weather', 'name': 'weather_api', 'parameters': {'properties': {'city': {'description': 'Insert city name', 'type': 'string'}}, 'required': ['city'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat is the weather description of Ottawa, and what is the current moon phase?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "a960fefe-4745-4a99-8b57-63f880ca05c4", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Search cocktails by name', 'name': 'the_cocktail_db_search_cocktail_by_name', 'parameters': {'properties': {'s': {'description': 'Search Cocktail Ingredient by Name', 'type': 'string'}}, 'required': ['s'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Filter by main ingredient', 'name': 'themealdb_filter_by_main_ingredient', 'parameters': {'properties': {'i': {'description': 'Insert ingredient', 'type': 'string'}}, 'required': ['i'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI would love to make a Mai Tai cocktail. Could you provide two of its ingredients? Also, which meal features potatoes as its main ingredient?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "e1208279-0df7-4775-a199-7a74216025ed", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Gives keto recipes within given range of carbohydrates  value. carbohydrates_in_grams__lt = Less than & carbohydrates_in_grams__gt = Greater than', 'name': 'keto_diet_filter_carbohydrates', 'parameters': {'properties': {'carbohydrates_in_grams__gt': {'description': 'More than', 'type': 'string'}, 'carbohydrates_in_grams__lt': {'description': 'Less than', 'type': 'string'}}, 'required': ['carbohydrates_in_grams__lt', 'carbohydrates_in_grams__gt'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Gives all keto recipes by its difficulty (Easy, Medium or Difficult).', 'name': 'keto_diet_filter_keto_recipes_by_difficulty', 'parameters': {'properties': {'difficulty': {'description': 'Level of difficulty', 'type': 'string'}}, 'required': ['difficulty'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nPlease find a keto meal containing 10 to 15 grams of carbohydrates and a keto meal with a medium level of difficulty in preparation.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "c82737aa-6f14-406a-acad-e06187343512", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Find recipes that use as many of the given ingredients as possible and have as little as possible missing ingredients. This is a whats in your fridge API endpoint.', 'name': 'recipe_food_nutrition_search_recipes_by_ingredients', 'parameters': {'properties': {'ingredients': {'description': 'A comma-separated list of ingredients that the recipes should contain. Example: apples,flour,sugar', 'type': 'string'}, 'number': {'description': 'The maximal number of recipes to return (default = 5).', 'type': 'string'}, 'ranking': {'description': 'Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.', 'enum': ['1', '2'], 'type': 'string'}}, 'required': ['ingredients'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Gives all recipes by the search term.', 'name': 'keto_diet_search_keto_recipe', 'parameters': {'properties': {'search': {'description': 'Insert term', 'type': 'string'}}, 'required': ['search'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhich meal can be prepared using curry powder, and what are two ingredients required to make Almond Butter Cup Cookies?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "039d3e8f-68ef-48f0-a0df-747c8556fb83", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'This endpoint is used for image searches', 'name': 'google_search_v3_image_search', 'parameters': {'properties': {'gl': {'description': 'The gl parameter value is a two-letter country code. The gl parameter boosts search results whose country of origin matches the parameter value.', 'enum': ['us', 'uk', 'jp', 'cn', 'es', 'fr', 'de', 'kr', 'dk', 'it'], 'type': 'string'}, 'lr': {'description': 'Restricts the search to documents written in a particular language', 'enum': ['zh', 'en', 'de', 'fr', 'ja', 'ko', 'de', 'da', 'dk', 'it', 'es'], 'type': 'string'}, 'query': {'description': 'Search query.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Search cocktails by name', 'name': 'the_cocktail_db_search_cocktail_by_name', 'parameters': {'properties': {'s': {'description': 'Search Cocktail Ingredient by Name', 'type': 'string'}}, 'required': ['s'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nCan you provide two ingredients of the Manhattan cocktail and also show me a link to a picture of a Paloma cocktail?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "aff3aa2f-1520-4a3e-bb19-76164ab848fe", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml.', 'name': 'realtime_weather', 'parameters': {'properties': {'q': {'description': 'Query parameter based on which data is sent back. It could be following: Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508 city name e.g.: q=Paris US zip e.g.: q=10001 UK postcode e.g: q=SW1 Canada postal code e.g: q=G2J metar: e.g: q=metar:EGLL iata:<3 digit airport code> e.g: q=iata:DXB auto:ip IP lookup e.g: q=auto:ip IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Search local businesses on Google Maps.', 'name': 'local_business_data_search', 'parameters': {'properties': {'limit': {'description': 'Maximum number of businesses to return (1-500).', 'type': 'string'}, 'query': {'description': \"Search query / keyword such as 'Plumbers near New-York, USA', 'Bars in 94102, USA'\", 'type': 'string'}, 'subtypes': {'description': 'Find businesses with specific subtypes, specified as a comma separated list of types (business categories). For the complete list of types, see https://daltonluka.com/blog/google-my-business-categories. E.g. Night club,Dance club,Bar,Pub', 'type': 'string'}}, 'required': ['query', 'subtypes'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nFind me a pub in Manchester, UK, and also tell me the current time in Sydney, Australia.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "88350964-0c24-4336-9f72-d211ec52c495", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Get all phone specifications by brand name and model name', 'name': 'mobile_phone_specs_database_get_specifications_by_brand_name_and_model_name', 'parameters': {'properties': {'brandName': {'description': 'The brand you want to look up', 'type': 'string'}, 'modelName': {'description': 'The model you want to look up', 'type': 'string'}}, 'required': ['brandName', 'modelName'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Get all the YouTube Search Results Items and their Information! No limits and no Google API Key needed!', 'name': 'youtube_search_results', 'parameters': {'properties': {'q': {'description': 'The URL Encoded search Query, e.g: justin+bieber', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat colors are available for Apple iPhone 15 Pro Max? Give me a video reviewing the phone in English.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "e1b0d3bb-fb6f-48cf-af06-e6b4a2128382", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Lists results for given date', 'name': 'cricket_live_data_results_by_date', 'parameters': {'properties': {'date': {'description': 'The date you want to check the results for. Please use format YYYY-MM-DD.', 'type': 'string'}}, 'required': ['date'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'This endpoint is used for image searches', 'name': 'google_search_v3_image_search', 'parameters': {'properties': {'gl': {'description': 'The gl parameter value is a two-letter country code. The gl parameter boosts search results whose country of origin matches the parameter value.', 'enum': ['us', 'uk', 'jp', 'cn', 'es', 'fr', 'de', 'kr', 'dk', 'it'], 'type': 'string'}, 'lr': {'description': 'Restricts the search to documents written in a particular language', 'enum': ['zh', 'en', 'de', 'fr', 'ja', 'ko', 'de', 'da', 'dk', 'it', 'es'], 'type': 'string'}, 'query': {'description': 'Search query.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nHello! Which team won the Hobart Hurricanes v Melbourne Stars cricket game played on December 24, 2021? Please provide me with the crest of Hobart Hurricanes\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "31050179-6e9e-44bf-8b6d-53e1bd1d316b", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Extract article from a web page. Outputs JSON containing the full content extracted from the input URL', 'name': 'full_text_rss_extract_article', 'parameters': {'properties': {'links': {'description': 'Links can either be preserved (default), made into footnotes, or removed. None of these options affect the link text, only the hyperlink itself.', 'enum': ['preserve', 'remove', 'footnotes'], 'type': 'string'}, 'url': {'description': \"The URL to extract content from. It should point to a standard HTML page. You can omit the 'http://' prefix if you like.\", 'type': 'string'}}, 'required': ['url'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Get website traffic, key metrics, including engagement rate, traffic ranking, keyword ranking and traffic source.', 'name': 'similar_web', 'parameters': {'properties': {'domain': {'description': 'The site you want to obtain information for, example: amazon.com', 'type': 'string'}}, 'required': ['domain'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nGive me the engagement visits metric for perezhilton.com, and provide an excerpt from this link: https://perezhilton.com/drake-bell-abuser-got-support-from-several-tv-stars/.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "73e59d7a-b616-4b76-90f4-0d90e2cab67d", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Find recipes that use as many of the given ingredients as possible and have as little as possible missing ingredients. This is a whats in your fridge API endpoint.', 'name': 'recipe_food_nutrition_search_recipes_by_ingredients', 'parameters': {'properties': {'ingredients': {'description': 'A comma-separated list of ingredients that the recipes should contain. Example: apples,flour,sugar', 'type': 'string'}, 'number': {'description': 'The maximal number of recipes to return (default = 5).', 'type': 'string'}, 'ranking': {'description': 'Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.', 'enum': ['1', '2'], 'type': 'string'}}, 'required': ['ingredients'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Guess the macro nutrients of a dish given its title.', 'name': 'recipe_food_nutrition_guess_nutrition_by_dish_name', 'parameters': {'properties': {'title': {'description': 'The title of the dish. Example: Spaghetti Aglio et Olio', 'type': 'string'}}, 'required': ['title'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nLocate a dish containing vegetables, and could you provide the protein content of pasta?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "df401909-c676-48c3-99d5-1975a8e5744d", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Simple and accurate currency converter allows you to convert between 160+ currencies', 'name': 'currency_converter', 'parameters': {'properties': {'amount': {'description': 'Amount to convert. Must be a positive number', 'type': 'number'}, 'from': {'description': 'Origin currency code', 'type': 'string'}, 'to': {'description': 'Target currency code', 'type': 'string'}}, 'required': ['from', 'to', 'amount'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Live currency and foreign exchange rates by specifying source and destination quotes and optionally amount to calculate. Support vast amount of quotes around the world.', 'name': 'currency_exchange', 'parameters': {'properties': {'from': {'description': 'Source currency', 'enum': ['ARS', 'BRL', 'CDF', 'CHF', 'CNY', 'EGP', 'EUR', 'INR', 'JPY', 'MXN', 'USD', 'IDR', 'GBP', 'QAR', 'SLL', 'NOK'], 'type': 'string'}, 'to': {'description': 'Target currency', 'enum': ['ARS', 'BRL', 'CDF', 'CHF', 'CNY', 'EGP', 'EUR', 'INR', 'JPY', 'MXN', 'CAD', 'NOK', 'SGD', 'USD', 'IDR', 'LKR', 'CAD', 'TZS', 'ZAR', 'OMR'], 'type': 'string'}}, 'required': ['from', 'to'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI am based in Italy and want to relocate to India. Could you help me convert my 100 Euros to Indian Rupees and also tell me the conversion rate of Indian Rupees to Euro?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "a1c7689d-ff0e-42ef-8e1f-b4f243b7991d", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'This endpoint is used for image searches', 'name': 'google_search_v3_image_search', 'parameters': {'properties': {'gl': {'description': 'The gl parameter value is a two-letter country code. The gl parameter boosts search results whose country of origin matches the parameter value.', 'enum': ['us', 'uk', 'jp', 'cn', 'es', 'fr', 'de', 'kr', 'dk', 'it'], 'type': 'string'}, 'lr': {'description': 'Restricts the search to documents written in a particular language', 'enum': ['zh', 'en', 'de', 'fr', 'ja', 'ko', 'de', 'da', 'dk', 'it', 'es'], 'type': 'string'}, 'query': {'description': 'Search query.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Gives all recipes by the search term.', 'name': 'keto_diet_search_keto_recipe', 'parameters': {'properties': {'search': {'description': 'Insert term', 'type': 'string'}}, 'required': ['search'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nLook up the ingredients of Baked Tortillas recipe and I would love to see a link to an image of a Baked Tortillas.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "0b814eea-c123-4a72-8920-0b26612f7f0b", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Search local businesses on Google Maps.', 'name': 'local_business_data_search', 'parameters': {'properties': {'limit': {'description': 'Maximum number of businesses to return (1-500).', 'type': 'string'}, 'query': {'description': \"Search query / keyword such as 'Plumbers near New-York, USA', 'Bars in 94102, USA'\", 'type': 'string'}, 'subtypes': {'description': 'Find businesses with specific subtypes, specified as a comma separated list of types (business categories). For the complete list of types, see https://daltonluka.com/blog/google-my-business-categories. E.g. Night club,Dance club,Bar,Pub', 'type': 'string'}}, 'required': ['query', 'subtypes'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Get the coordinates of the place by the address query', 'name': 'maps_data_geocoding', 'parameters': {'properties': {'query': {'description': 'The place to  look up', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI have just been referred for medical care to New York. Give me the coordinates of the city of New York and search for a popular hospital in New York.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "5ed0b001-492c-4aef-8525-0f7b6f0fe7ce", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'This endpoint is used for image searches', 'name': 'google_search_v3_image_search', 'parameters': {'properties': {'gl': {'description': 'The gl parameter value is a two-letter country code. The gl parameter boosts search results whose country of origin matches the parameter value.', 'enum': ['us', 'uk', 'jp', 'cn', 'es', 'fr', 'de', 'kr', 'dk', 'it'], 'type': 'string'}, 'lr': {'description': 'Restricts the search to documents written in a particular language', 'enum': ['zh', 'en', 'de', 'fr', 'ja', 'ko', 'de', 'da', 'dk', 'it', 'es'], 'type': 'string'}, 'query': {'description': 'Search query.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Google Search API. Search the world\u2019s information, including webpages, related keywords and more.', 'name': 'google_search_v2', 'parameters': {'properties': {'query': {'description': 'Search query. You can use Google Search parameters.', 'type': 'string'}}, 'required': ['query'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nI'm currently teaching history classes in college. Can you provide an article to the history of Aruba and also get an image of the country.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "a34710d9-1559-43e5-b80a-5d338f3c14fa", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Gives keto recipes within given range of carbohydrates  value. carbohydrates_in_grams__lt = Less than & carbohydrates_in_grams__gt = Greater than', 'name': 'keto_diet_filter_carbohydrates', 'parameters': {'properties': {'carbohydrates_in_grams__gt': {'description': 'More than', 'type': 'string'}, 'carbohydrates_in_grams__lt': {'description': 'Less than', 'type': 'string'}}, 'required': ['carbohydrates_in_grams__lt', 'carbohydrates_in_grams__gt'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Gives keto recipes within given range of Calories value. Calories_in_grams__lt = Less than & Calories_in_grams__gt = Greater than', 'name': 'keto_diet_filter_calories', 'parameters': {'properties': {'calories_in_grams__gt': {'description': 'More than', 'type': 'string'}, 'calories_in_grams__lt': {'description': 'Less than', 'type': 'string'}}, 'required': ['calories_in_grams__lt', 'calories_in_grams__gt'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nWhat is the title of a keto recipe containing 50 to 100 grams. and another keto recipe within the range of 200 to 500 calories?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "95f88a07-2ed0-4d3c-b2e1-5b34b97cd99f", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml.', 'name': 'realtime_weather', 'parameters': {'properties': {'q': {'description': 'Query parameter based on which data is sent back. It could be following: Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508 city name e.g.: q=Paris US zip e.g.: q=10001 UK postcode e.g: q=SW1 Canada postal code e.g: q=G2J metar: e.g: q=metar:EGLL iata:<3 digit airport code> e.g: q=iata:DXB auto:ip IP lookup e.g: q=auto:ip IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Get estimated salaries for a jobs around a location.', 'name': 'jsearch_estimated_salary', 'parameters': {'properties': {'job_title': {'description': 'Job title for which to get salary estimation.', 'type': 'string'}, 'location': {'description': 'Location in which to get salary estimation.', 'type': 'string'}}, 'required': ['job_title', 'location'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nHow much can a painter expect to make in Boise? What is the weather like there? I'm thinking of moving\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "b829c965-cd52-4a69-8ac7-d356f9e45c59", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Returns card by name or ID. This may return more than one card if they share the same name. Loatheb returns both the card and the boss.', 'name': 'hearthstone_single_card', 'parameters': {'properties': {'name': {'description': 'The name or ID of the card. Example values: Ysera, EX1_572.', 'type': 'string'}}, 'required': ['name'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Get all the YouTube Search Results Items and their Information! No limits and no Google API Key needed!', 'name': 'youtube_search_results', 'parameters': {'properties': {'q': {'description': 'The URL Encoded search Query, e.g: justin+bieber', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nCould you provide a link to a video explaining how to play the Hearthstone card game? Also, What category does the Shaman card belong to? \n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "c78eddb6-4715-43c2-b8d3-97965d4d47af", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Gives all recipes by the search term.', 'name': 'keto_diet_search_keto_recipe', 'parameters': {'properties': {'search': {'description': 'Insert term', 'type': 'string'}}, 'required': ['search'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Guess the macro nutrients of a dish given its title.', 'name': 'recipe_food_nutrition_guess_nutrition_by_dish_name', 'parameters': {'properties': {'title': {'description': 'The title of the dish. Example: Spaghetti Aglio et Olio', 'type': 'string'}}, 'required': ['title'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nHey! I need the directions to make a Keto Sausage Casserole and also include both the fat and protein content in one serving.\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "3ce8b2e2-1fe3-469c-97a0-c5f71140e34f", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Get all the YouTube Search Results Items and their Information! No limits and no Google API Key needed!', 'name': 'youtube_search_results', 'parameters': {'properties': {'q': {'description': 'The URL Encoded search Query, e.g: justin+bieber', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Information about the country: area_size, country, continent, timezone, currency, population, flag, dependent territories, wikipedia reference totals of the cities and the first-level divisions.', 'name': 'world_geo_data_country_details', 'parameters': {'properties': {'code': {'description': 'e.g. US', 'type': 'string'}, 'format': {'description': '', 'enum': ['json', 'xml'], 'type': 'string'}}, 'required': ['code'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nMy sister has just got a job in Armenia. Can you show me a picture of the country's flag and a link to a video about the country?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "02824d8f-0d39-424c-bfa3-3baa2cee2198", "target_plan_number": 3}}
{"input": "Choose the appropriate plan with its associated set of tools to accomplish a specific task.\n\nEach tool's functionality is using Open API schema notation.\n\n\"[A B]\" indicates that tools A and B can operate in parallel without any interdependencies.\n\"A -> B\" indicates that tool A must be executed prior to tool B, as B's operation is contingent upon the output from A.\n\"B -> A\" indicates that tool B must be executed prior to tool A, as A's operation is contingent upon the output from B.\n\"[A B] -> C\" indicates that tools A and B will be executed in parallel initially, followed by tool C, which requires the outputs from both A and B.\n\nBelow is a compilation of all available tools, described in JSON format:\n\nTool A:\n {'function': {'description': 'Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml.', 'name': 'realtime_weather', 'parameters': {'properties': {'q': {'description': 'Query parameter based on which data is sent back. It could be following: Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508 city name e.g.: q=Paris US zip e.g.: q=10001 UK postcode e.g: q=SW1 Canada postal code e.g: q=G2J metar: e.g: q=metar:EGLL iata:<3 digit airport code> e.g: q=iata:DXB auto:ip IP lookup e.g: q=auto:ip IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1', 'type': 'string'}}, 'required': ['q'], 'type': 'object'}}, 'type': 'function'}\n\nTool B:\n {'function': {'description': 'Find places, filtering by optional criteria.', 'name': 'geodb_cities_places', 'parameters': {'properties': {'countryIds': {'description': 'Only places in these countries (comma-delimited country codes from GeoDB Cities - Countries or WikiData ids)', 'type': 'string'}, 'location': {'description': 'Only places near this location. Latitude/longitude in ISO-6709 format: \u00b1DD.DDDD\u00b1DDD.DDDD', 'type': 'string'}, 'namePrefix': {'description': 'The beginning of the place you want to look up', 'type': 'string'}, 'radius': {'description': 'The location radius within which to find places. Only use if a location is given', 'type': 'string'}}, 'required': ['namePrefix'], 'type': 'object'}}, 'type': 'function'}\n\nHere are all possible plans:\n\n1: A -> B\n2: B -> A\n3: [A B]\n\nTask Input:\nMy friend was telling me how beautiful Pamukkale is. Can you tell me which country it's in, and what is the current temperature there right now?\n\nBe concise with a response in the format \"Chosen Plan: N\", where \"N\" represents the number of the selected plan.", "output": {"id": "abdcf629-77b6-40f1-a8a0-5ef09d98fb77", "target_plan_number": 3}}
